<Window x:Class="SqueakIDE.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
    xmlns:avalonDock="http://schemas.xceed.com/wpf/xaml/avalondock"
    xmlns:docking="http://schemas.xceed.com/wpf/xaml/avalondock"
    xmlns:converters="SqueakIDE.Converters"
    xmlns:logging="clr-namespace:Microsoft.Extensions.Logging;assembly=Microsoft.Extensions.Logging.Abstractions" xmlns:local="clr-namespace:SqueakIDE.Controls" mc:Ignorable="d" Title="Squeak IDE" Height="800" Width="1200" WindowStyle="None" AllowsTransparency="True" Background="{DynamicResource BackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}" UseLayoutRounding="True" SnapsToDevicePixels="True" ResizeMode="CanResizeWithGrip">
    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="0" ResizeBorderThickness="6" CornerRadius="0" GlassFrameThickness="0"/>
    </WindowChrome.WindowChrome>
    <Window.InputBindings>
        <KeyBinding Gesture="Ctrl+S" Command="{Binding SaveCommand}"/>
    </Window.InputBindings>
    <Window.Resources>
        <!-- Window Button Style -->
        <Style x:Key="WindowButtonStyle" TargetType="Button">
            <Setter Property="Width" Value="46"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource HighlightBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- ScrollBar Style -->
        <Style TargetType="ScrollBar">
            <!-- Base size/color settings -->
            <Setter Property="Width" Value="16"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollBar">
                        <!-- A single Grid that has 3 row definitions and 3 column definitions.
                     We'll place the up/left button, track, and down/right button in
                     row/col positions for the *vertical* layout by default. Then triggers
                     move them into a horizontal layout if needed.
                -->
                        <Grid x:Name="MainGrid" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                            <Grid.RowDefinitions>
                                <!-- For vertical layout: top button, middle track, bottom button -->
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <!-- For horizontal layout: left button, track, right button -->
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>

                            <!-- Top button (VERTICAL default). Commands = LineUp/LineDown for vertical -->
                            <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" Content="˄" Width="16" Height="16" Background="{DynamicResource BorderBrush}" Foreground="{TemplateBinding Foreground}" Grid.Row="0" Grid.Column="0"/>

                            <!-- Middle track (VERTICAL default). -->
                            <Track x:Name="PART_Track" Grid.Row="1" Grid.Column="0" Value="{TemplateBinding Value}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" ViewportSize="{TemplateBinding ViewportSize}" Orientation="{TemplateBinding Orientation}" IsDirectionReversed="True">
                                <Track.Thumb>
                                    <Thumb Background="{DynamicResource HighlightBrush}" Foreground="{TemplateBinding Foreground}"/>
                                </Track.Thumb>
                            </Track>

                            <!-- Bottom button (VERTICAL default). -->
                            <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" Content="˅" Width="16" Height="16" Background="{DynamicResource BorderBrush}" Foreground="{TemplateBinding Foreground}" Grid.Row="2" Grid.Column="0"/>
                        </Grid>

                        <!-- TRIGGERS: If Orientation=Horizontal, swap to horizontal commands & positions -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="Orientation" Value="Horizontal">
                                <!-- 1) Change the commands/content for left/right behavior -->
                                <Setter TargetName="PART_LineUpButton" Property="Command" Value="{x:Static ScrollBar.LineLeftCommand}" />
                                <Setter TargetName="PART_LineUpButton" Property="Content" Value="˂" />

                                <Setter TargetName="PART_LineDownButton" Property="Command" Value="{x:Static ScrollBar.LineRightCommand}" />
                                <Setter TargetName="PART_LineDownButton" Property="Content" Value="˃" />

                                <!-- 2) Move the buttons & track into a single row, separate columns -->
                                <Setter TargetName="PART_LineUpButton" Property="Grid.Row" Value="0"/>
                                <Setter TargetName="PART_LineUpButton" Property="Grid.Column" Value="0"/>

                                <Setter TargetName="PART_Track" Property="Grid.Row" Value="0"/>
                                <Setter TargetName="PART_Track" Property="Grid.Column" Value="1"/>
                                <Setter TargetName="PART_Track" Property="IsDirectionReversed" Value="false"/>

                                <Setter TargetName="PART_LineDownButton" Property="Grid.Row" Value="0"/>
                                <Setter TargetName="PART_LineDownButton" Property="Grid.Column" Value="2"/>

                                <!-- Optionally set the scrollbar's Height to 16 if it's horizontal -->
                                <Setter Property="Height" Value="16"/>
                                <Setter Property="Width" Value="Auto"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="TreeView">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        </Style>

        <Style TargetType="TreeViewItem">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Style.Triggers>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>


        <!-- Border Style -->
        <Style TargetType="Border">
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

        <SolidColorBrush x:Key="UserMessageBackground" Color="{Binding Color, Source={DynamicResource BackgroundBrush}}"/>

        <Style TargetType="ComboBox">
            <Setter Property="Background" Value="{DynamicResource InputBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton x:Name="ToggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path x:Name="Arrow" Fill="{DynamicResource ForegroundBrush}" HorizontalAlignment="Right" Data="M0,0 L4,4 L8,0 Z" Margin="0,2,5,0"/>
                            </ToggleButton>
                            <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"/>
                            <Popup x:Name="Popup" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" Background="{DynamicResource InputBackgroundBrush}" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                        <ScrollViewer SnapsToDevicePixels="True">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Add this style for ComboBoxItem -->
        <Style x:Key="ToolBarComboBoxItemStyle" TargetType="ComboBoxItem">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Setter Property="Padding" Value="5,2"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource HoverForegroundBrush}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SelectionBackgroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Add to your resources -->
        <Style TargetType="ToolBar">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="0,0,0,1"/>
            <Setter Property="Padding" Value="5,2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolBar">
                        <Border Name="MainPanelBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ToolBarPanel Name="PART_ToolBarPanel" Grid.Column="0" IsItemsHost="true" Margin="{TemplateBinding Padding}" Background="{TemplateBinding Background}"/>
                                <!-- Empty grid cell to replace the overflow button -->
                                <Rectangle Grid.Column="1" Width="11" Fill="{TemplateBinding Background}"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ToolBarPanel">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}"/>
            <Setter Property="Orientation" Value="Horizontal"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
        </Style>

        <Style x:Key="ToolBarButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="8,4"/>
            <Setter Property="Margin" Value="2,0"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource HoverForegroundBrush}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{DynamicResource ActiveBackgroundBrush}"/>
                    <Setter Property="Foreground" Value="{DynamicResource ActiveForegroundBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ToolBarSeparatorStyle" TargetType="Separator">
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="Width" Value="1"/>
            <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
        </Style>

        <Style x:Key="ToolBarComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Background" Value="{DynamicResource InputBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="Height" Value="24"/>
            <Setter Property="Margin" Value="2,0"/>
            <Setter Property="Padding" Value="5,2"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ComboBox">
                        <Grid>
                            <ToggleButton x:Name="ToggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Path x:Name="Arrow" Fill="{DynamicResource ForegroundBrush}" HorizontalAlignment="Right" Data="M0,0 L4,4 L8,0 Z" Margin="0,2,5,0"/>
                            </ToggleButton>
                            <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"/>
                            <Popup x:Name="Popup" AllowsTransparency="True" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
                                <Grid x:Name="DropDown" Background="{DynamicResource InputBackgroundBrush}" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                        <ScrollViewer SnapsToDevicePixels="True">
                                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                        </ScrollViewer>
                                    </Border>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <Grid>
        <DockPanel Margin="0" Background="{DynamicResource BackgroundBrush}">
            <!-- Window Control Buttons -->
            <Grid DockPanel.Dock="Top" Height="30" Background="{DynamicResource BackgroundBrush}" MouseLeftButtonDown="TitleBar_MouseLeftButtonDown" Margin="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!-- Window Title -->
                <TextBlock Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="{DynamicResource ForegroundBrush}"/>

                <!-- Window Buttons -->
                <StackPanel Grid.Column="1" Orientation="Horizontal">
                    <Button Style="{StaticResource WindowButtonStyle}" Content="—" Click="MinimizeButton_Click"/>
                    <Button Style="{StaticResource WindowButtonStyle}" Content="☐" Click="MaximizeButton_Click"/>
                    <Button Style="{StaticResource WindowButtonStyle}" Content="✕" Click="CloseButton_Click"/>
                </StackPanel>
            </Grid>

            <!-- Main Toolbar with Border -->
            <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,0,0,1" Background="{DynamicResource SecondaryBackgroundBrush}">
                <StackPanel Orientation="Horizontal" Margin="5,2">
                    <!-- Left-aligned buttons -->
                    <Button Content="Run" Click="RunCode" Style="{StaticResource ToolBarButtonStyle}"/>
                    <Rectangle Width="1" Margin="5,0" Fill="{DynamicResource BorderBrush}"/>
                    <local:DebugToolbar x:Name="DebugToolbar"/>
                    <Rectangle Width="1" Margin="5,0" Fill="{DynamicResource BorderBrush}"/>
                    <ComboBox x:Name="LogLevelComboBox" Width="100" SelectedIndex="0" SelectionChanged="LogLevel_SelectionChanged" Style="{StaticResource ToolBarComboBoxStyle}">
                        <ComboBoxItem Style="{StaticResource ToolBarComboBoxItemStyle}">Error</ComboBoxItem>
                        <ComboBoxItem Style="{StaticResource ToolBarComboBoxItemStyle}">Warning</ComboBoxItem>
                        <ComboBoxItem Style="{StaticResource ToolBarComboBoxItemStyle}">Information</ComboBoxItem>
                        <ComboBoxItem Style="{StaticResource ToolBarComboBoxItemStyle}">Debug</ComboBoxItem>
                        <ComboBoxItem Style="{StaticResource ToolBarComboBoxItemStyle}">Trace</ComboBoxItem>
                    </ComboBox>
                    <Button Content="Open Folder" Click="OpenFolder" Style="{StaticResource ToolBarButtonStyle}"/>
                    <Button Content="New Tab" Click="CreateNewFile" Style="{StaticResource ToolBarButtonStyle}"/>
                    <Button Content="Save As" Click="SaveAs_Click" Style="{StaticResource ToolBarButtonStyle}"/>

                    <!-- Git Section -->
                    <Rectangle Width="1" Margin="5,0" Fill="{DynamicResource BorderBrush}"/>
                    <Button Click="GitLogin_Click" ToolTip="Git Login" Style="{StaticResource ToolBarButtonStyle}">
                        <TextBlock Text="🔑" FontSize="16"/>
                    </Button>
                    <Button Click="GitCommit_Click" ToolTip="Commit Changes" Style="{StaticResource ToolBarButtonStyle}">
                        <TextBlock Text="📝" FontSize="16"/>
                    </Button>
                    <Button Click="GitPull_Click" ToolTip="Pull Changes" Style="{StaticResource ToolBarButtonStyle}">
                        <TextBlock Text="⬇️" FontSize="16"/>
                    </Button>
                    <Button Click="GitPush_Click" ToolTip="Push Changes" Style="{StaticResource ToolBarButtonStyle}">
                        <TextBlock Text="⬆️" FontSize="16"/>
                    </Button>
                    <ComboBox x:Name="BranchComboBox" Width="150" Style="{StaticResource ToolBarComboBoxStyle}" SelectionChanged="BranchComboBox_SelectionChanged"/>

                    <!-- LiveShare Section -->
                    <Rectangle Width="1" Margin="5,0" Fill="{DynamicResource BorderBrush}"/>
                    <Button Content="Start LiveShare" Click="StartLiveShare_Click" Style="{StaticResource ToolBarButtonStyle}" ToolTip="Start a new LiveShare session"/>
                    <Button Content="Join LiveShare" Click="JoinLiveShare_Click" Style="{StaticResource ToolBarButtonStyle}" ToolTip="Join an existing LiveShare session"/>
                    <Button Content="End LiveShare" Click="EndLiveShare_Click" Style="{StaticResource ToolBarButtonStyle}" ToolTip="End current LiveShare session"/>

                    <!-- Theme Button and Popup -->
                    <Button x:Name="ThemeButton" Click="ThemeButton_Click" Style="{StaticResource ToolBarButtonStyle}">
                        <TextBlock Text="🎨" FontSize="16"/>
                    </Button>
                    <Popup x:Name="ThemesPopup" StaysOpen="False" Placement="Bottom" PlacementTarget="{Binding ElementName=ThemeButton}" AllowsTransparency="True">
                        <Border Background="{DynamicResource PopupBackgroundBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                            <Menu Background="Transparent">
                                <Menu.Resources>
                                    <Style TargetType="MenuItem">
                                        <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                                            </Trigger>
                                            <Trigger Property="IsPressed" Value="True">
                                                <Setter Property="Background" Value="{DynamicResource ActiveBackgroundBrush}"/>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                    <Style TargetType="Separator">
                                        <Setter Property="Background" Value="{DynamicResource BorderBrush}"/>
                                    </Style>
                                </Menu.Resources>
                                <Menu.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical"/>
                                    </ItemsPanelTemplate>
                                </Menu.ItemsPanel>
                                <MenuItem Header="Themes">
                                    <MenuItem.Items>
                                        <MenuItem Header="CozyDark" Click="Theme_Click" Tag="CozyDark"/>
                                        <MenuItem Header="CheeseCave" Click="Theme_Click" Tag="CheeseCave"/>
                                        <MenuItem Header="Ocean Depths" Click="Theme_Click" Tag="OceanDepths"/>
                                        <MenuItem Header="Forest Canopy" Click="Theme_Click" Tag="ForestCanopy"/>
                                        <MenuItem Header="Monokai Pro" Click="Theme_Click" Tag="MonokaiPro"/>
                                        <MenuItem Header="Solarized Dark" Click="Theme_Click" Tag="SolarizedDark"/>
                                        <Separator/>
                                        <MenuItem Header="Custom Themes" x:Name="CustomThemesMenu">
                                            <MenuItem.ItemContainerStyle>
                                                <Style TargetType="MenuItem">
                                                    <Setter Property="Background" Value="{DynamicResource PopupBackgroundBrush}"/>
                                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                                                    <Setter Property="ContextMenu">
                                                        <Setter.Value>
                                                            <ContextMenu Background="{DynamicResource PopupBackgroundBrush}" BorderBrush="{DynamicResource BorderBrush}">
                                                                <MenuItem Header="Delete" Click="DeleteTheme_Click" Background="{DynamicResource PopupBackgroundBrush}" Foreground="{DynamicResource ForegroundBrush}"/>
                                                            </ContextMenu>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource HoverBackgroundBrush}"/>
                                                        </Trigger>
                                                        <Trigger Property="IsPressed" Value="True">
                                                            <Setter Property="Background" Value="{DynamicResource ActiveBackgroundBrush}"/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </MenuItem.ItemContainerStyle>
                                        </MenuItem>
                                        <MenuItem Header="Create New Theme..." Click="CreateTheme_Click"/>
                                        <MenuItem Header="Edit Current Theme..." Click="EditTheme_Click"/>
                                    </MenuItem.Items>
                                </MenuItem>
                            </Menu>
                        </Border>
                    </Popup>
                </StackPanel>
            </Border>

            <!-- Extensions Section -->
            <Border DockPanel.Dock="Top" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,0,0,1" Background="{DynamicResource SecondaryBackgroundBrush}">
                <StackPanel x:Name="ExtensionsToolbar" Orientation="Horizontal" Margin="5,2"/>
            </Border>

            <!-- Status Bar with Top Border -->
            <Border DockPanel.Dock="Bottom" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="0,1,0,0">
                <StatusBar Background="{DynamicResource SecondaryBackgroundBrush}" Height="Auto">
                    <TextBlock x:Name="StatusText" Foreground="{DynamicResource ForegroundBrush}" Text="Ready"/>
                    <Separator/>
                    <TextBlock x:Name="LineColStatus" Foreground="{DynamicResource ForegroundBrush}"/>
                    <Separator/>
                    <TextBlock x:Name="EncodingStatus" Foreground="{DynamicResource ForegroundBrush}"/>
                </StatusBar>
            </Border>

            <!-- Docking Manager with Borders -->
            <avalonDock:DockingManager x:Name="DockingManager" Background="{DynamicResource SecondaryBackgroundBrush}">
                <avalonDock:LayoutRoot>
                    <avalonDock:LayoutPanel Orientation="Horizontal">
                        <!-- Folder Explorer Panel with Border -->
                        <avalonDock:LayoutAnchorablePaneGroup Orientation="Vertical" DockWidth="250">
                            <avalonDock:LayoutAnchorablePane>
                                <avalonDock:LayoutAnchorable Title="Folder Explorer">
                                    <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                        <TreeView x:Name="FolderExplorer" Background="{DynamicResource TertiaryBackgroundBrush}" Foreground="{DynamicResource ForegroundBrush}" SelectedItemChanged="FolderExplorer_SelectedItemChanged" Grid.Row="1">
                                            <TreeView.ContextMenu>
                                                <ContextMenu>
                                                    <MenuItem Header="Add">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="➕" />
                                                        </MenuItem.Icon>
                                                        <MenuItem Header="New File" Click="AddNewFile_Click">
                                                            <MenuItem.Icon>
                                                                <TextBlock Text="📄" />
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Header="Existing File" Click="AddExistingFile_Click">
                                                            <MenuItem.Icon>
                                                                <TextBlock Text="📎" />
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                        <MenuItem Header="New Folder" Click="AddNewFolder_Click">
                                                            <MenuItem.Icon>
                                                                <TextBlock Text="📁" />
                                                            </MenuItem.Icon>
                                                        </MenuItem>
                                                    </MenuItem>
                                                    <Separator/>
                                                    <MenuItem Header="Remove from Project" Click="RemoveFromProject_Click">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="❌" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                    <MenuItem Header="Delete" Click="DeleteFile_Click">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="🗑️" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                    <Separator/>
                                                    <MenuItem Header="Copy Path" Click="CopyPath_Click">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="📋" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                    <MenuItem Header="Open in File Explorer" Click="OpenInExplorer_Click">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="📂" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                    <Separator/>
                                                    <MenuItem Header="Refresh" Click="RefreshProjectExplorer_Click">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="🔄" />
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                </ContextMenu>
                                            </TreeView.ContextMenu>
                                            <TreeView.Resources>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{DynamicResource HighlightColor}"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{DynamicResource ForegroundColor}"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{DynamicResource HighlightColor}"/>
                                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{DynamicResource ForegroundColor}"/>
                                            </TreeView.Resources>
                                        </TreeView>
                                    </Border>
                                </avalonDock:LayoutAnchorable>
                            </avalonDock:LayoutAnchorablePane>
                        </avalonDock:LayoutAnchorablePaneGroup>

                        <!-- Tabbed Editor and Panels -->
                        <avalonDock:LayoutPanel Orientation="Vertical">
                            <!-- Tabbed Editor -->
                            <avalonDock:LayoutDocumentPaneGroup>
                                <avalonDock:LayoutDocumentPane x:Name="EditorTabs">
                                </avalonDock:LayoutDocumentPane>
                            </avalonDock:LayoutDocumentPaneGroup>

                            <!-- Output/Error Panels with Borders -->
                            <avalonDock:LayoutAnchorablePaneGroup Orientation="Horizontal" DockHeight="150">
                                <avalonDock:LayoutAnchorablePane>
                                    <avalonDock:LayoutAnchorable Title="Output">
                                        <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                            <TextBox x:Name="OutputBox" FontFamily="Consolas" FontSize="14" IsReadOnly="True" Background="{DynamicResource TertiaryBackgroundBrush}" Foreground="{DynamicResource ForegroundBrush}" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" />
                                        </Border>
                                    </avalonDock:LayoutAnchorable>
                                </avalonDock:LayoutAnchorablePane>
                                <avalonDock:LayoutAnchorablePane>
                                    <avalonDock:LayoutAnchorable Title="Error List">
                                        <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                            <ListBox x:Name="ErrorList" Background="{DynamicResource TertiaryBackgroundBrush}" Foreground="{DynamicResource ForegroundBrush}" BorderThickness="0" ScrollViewer.VerticalScrollBarVisibility="Auto" />
                                        </Border>
                                    </avalonDock:LayoutAnchorable>
                                </avalonDock:LayoutAnchorablePane>
                            </avalonDock:LayoutAnchorablePaneGroup>

                            <!-- AI Assistant Panel with Border -->
                            <avalonDock:LayoutAnchorablePaneGroup Orientation="Vertical">
                                <avalonDock:LayoutAnchorablePane>
                                    <avalonDock:LayoutAnchorable Title="AI Assistant" CanHide="True" CanFloat="True">
                                        <Border BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1">
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="*"/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>

                                                <ScrollViewer x:Name="ChatScrollViewer" Grid.Row="0" VerticalScrollBarVisibility="Auto">
                                                    <ItemsControl x:Name="ChatMessages" Background="{DynamicResource SecondaryBackgroundBrush}">
                                                        <ItemsControl.ItemTemplate>
                                                            <DataTemplate>
                                                                <Border Margin="5" Padding="10" Background="{DynamicResource SecondaryBackgroundBrush}" CornerRadius="5">
                                                                    <StackPanel>
                                                                        <TextBlock Text="{Binding Sender}" FontWeight="Bold" Foreground="{DynamicResource ForegroundBrush}"/>
                                                                        <TextBox Text="{Binding Content}" TextWrapping="Wrap" Foreground="{DynamicResource ForegroundBrush}" Background="Transparent" BorderThickness="0" IsReadOnly="True" IsReadOnlyCaretVisible="True"/>
                                                                    </StackPanel>
                                                                </Border>
                                                            </DataTemplate>
                                                        </ItemsControl.ItemTemplate>
                                                    </ItemsControl>
                                                </ScrollViewer>

                                                <Grid Grid.Row="1" Margin="5">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <TextBox x:Name="MessageInput" Grid.Column="0" Margin="0,0,5,0" Background="{DynamicResource InputBackgroundBrush}" Foreground="{DynamicResource ForegroundBrush}" AcceptsReturn="True" TextWrapping="Wrap" KeyDown="MessageInput_KeyDown"/>
                                                    <Button Grid.Column="1" Content="Send" Click="SendMessage_Click" Width="60" Background="{DynamicResource BorderBrush}" Foreground="{DynamicResource ForegroundBrush}"/>
                                                </Grid>
                                            </Grid>
                                        </Border>
                                    </avalonDock:LayoutAnchorable>
                                </avalonDock:LayoutAnchorablePane>
                            </avalonDock:LayoutAnchorablePaneGroup>

                            <!-- Debug Panel -->
                            <avalonDock:LayoutAnchorablePaneGroup DockWidth="300">
                                <avalonDock:LayoutAnchorablePane>
                                    <avalonDock:LayoutAnchorable Title="Debug" CanHide="True">
                                        <Grid x:Name="DebugOverlay" Visibility="Collapsed">
                                            <Border x:Name="DebugHighlight" 
                                                    Background="#20000000" 
                                                    VerticalAlignment="Top" 
                                                    Height="20"/>
                                            <StackPanel>
                                                <GroupBox Header="Variables">
                                                    <ListView x:Name="VariablesView" Height="200"/>
                                                </GroupBox>
                                                <GroupBox Header="Call Stack">
                                                    <ListView x:Name="CallStackView"/>
                                                </GroupBox>
                                            </StackPanel>
                                        </Grid>
                                    </avalonDock:LayoutAnchorable>
                                </avalonDock:LayoutAnchorablePane>
                            </avalonDock:LayoutAnchorablePaneGroup>
                        </avalonDock:LayoutPanel>
                    </avalonDock:LayoutPanel>
                </avalonDock:LayoutRoot>
                <docking:DockingManager.DocumentContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Pin Tab" Click="PinTab_Click" x:Name="PinMenuItem">
                            <MenuItem.Icon>
                                <TextBlock Text="📌" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="Close" Click="CloseTab_Click">
                            <MenuItem.Icon>
                                <TextBlock Text="❌" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="Close All But This" Click="CloseAllButThis_Click">
                            <MenuItem.Icon>
                                <TextBlock Text="📑" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="Close All" Click="CloseAllTabs_Click">
                            <MenuItem.Icon>
                                <TextBlock Text="🗑️" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <Separator/>
                        <MenuItem Header="Save" Click="SaveTab_Click">
                            <MenuItem.Icon>
                                <TextBlock Text="💾" />
                            </MenuItem.Icon>
                        </MenuItem>
                        <MenuItem Header="Save All" Click="SaveAllTabs_Click">
                            <MenuItem.Icon>
                                <TextBlock Text="💾" />
                            </MenuItem.Icon>
                        </MenuItem>
                    </ContextMenu>
                </docking:DockingManager.DocumentContextMenu>
            </avalonDock:DockingManager>
        </DockPanel>

        <Canvas x:Name="OverlayCanvas" IsHitTestVisible="False" Panel.ZIndex="1000"/>
    </Grid>
</Window>
