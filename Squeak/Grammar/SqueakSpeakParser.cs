//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SqueakSpeak.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SqueakSpeakParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, STRING=41, ID=42, FLOAT=43, NUMBER=44, WS=45, LINE_COMMENT=46, 
		BLOCK_COMMENT=47;
	public const int
		RULE_program = 0, RULE_adorableStatement = 1, RULE_extraStatement = 2, 
		RULE_nativeCall = 3, RULE_squeakNetGet = 4, RULE_squeakIn = 5, RULE_squeakMathCall = 6, 
		RULE_squeakOut = 7, RULE_hugThis = 8, RULE_snugLoop = 9, RULE_fluffMagic = 10, 
		RULE_snuggleIf = 11, RULE_snipChoose = 12, RULE_snipCase = 13, RULE_snipDefault = 14, 
		RULE_bringWarmth = 15, RULE_invokeWhimsy = 16, RULE_purrMath = 17, RULE_leftExpr = 18, 
		RULE_objectCreation = 19, RULE_fieldAssignment = 20, RULE_returnStatement = 21, 
		RULE_purrOperation = 22, RULE_purrOperator = 23, RULE_fieldAccess = 24, 
		RULE_purrTerm = 25, RULE_nativeCallExpr = 26, RULE_baseTerm = 27, RULE_arrayLiteral = 28, 
		RULE_condition = 29, RULE_paramList = 30, RULE_param = 31;
	public static readonly string[] ruleNames = {
		"program", "adorableStatement", "extraStatement", "nativeCall", "squeakNetGet", 
		"squeakIn", "squeakMathCall", "squeakOut", "hugThis", "snugLoop", "fluffMagic", 
		"snuggleIf", "snipChoose", "snipCase", "snipDefault", "bringWarmth", "invokeWhimsy", 
		"purrMath", "leftExpr", "objectCreation", "fieldAssignment", "returnStatement", 
		"purrOperation", "purrOperator", "fieldAccess", "purrTerm", "nativeCallExpr", 
		"baseTerm", "arrayLiteral", "condition", "paramList", "param"
	};

	private static readonly string[] _LiteralNames = {
		null, "'NativeCall'", "'('", "')'", "'->'", "';'", "'BeepBoop'", "'Listen'", 
		"'Brain'", "','", "'Squeak'", "'Cuddle'", "'='", "'Nuzzle'", "'{'", "'}'", 
		"'FluffMagic'", "'Peek'", "'Purr'", "'SnipChoose'", "'SnipCase'", "':'", 
		"'SnipDefault'", "'BringWarmth'", "'['", "']'", "'SnuggleObject'", "'PawReturn'", 
		"'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'NativeFunc'", "'=='", "'!='", 
		"'<'", "'>'", "'<='", "'>='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "STRING", "ID", "FLOAT", "NUMBER", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SqueakSpeak.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SqueakSpeakParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SqueakSpeakParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SqueakSpeakParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SqueakSpeakParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext[] adorableStatement() {
			return GetRuleContexts<AdorableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext adorableStatement(int i) {
			return GetRuleContext<AdorableStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
				{
				{
				State = 64;
				adorableStatement();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdorableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqueakOutContext squeakOut() {
			return GetRuleContext<SqueakOutContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HugThisContext hugThis() {
			return GetRuleContext<HugThisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SnugLoopContext snugLoop() {
			return GetRuleContext<SnugLoopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FluffMagicContext fluffMagic() {
			return GetRuleContext<FluffMagicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SnuggleIfContext snuggleIf() {
			return GetRuleContext<SnuggleIfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrMathContext purrMath() {
			return GetRuleContext<PurrMathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SnipChooseContext snipChoose() {
			return GetRuleContext<SnipChooseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BringWarmthContext bringWarmth() {
			return GetRuleContext<BringWarmthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeWhimsyContext invokeWhimsy() {
			return GetRuleContext<InvokeWhimsyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqueakNetGetContext squeakNetGet() {
			return GetRuleContext<SqueakNetGetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqueakInContext squeakIn() {
			return GetRuleContext<SqueakInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqueakMathCallContext squeakMathCall() {
			return GetRuleContext<SqueakMathCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NativeCallContext nativeCall() {
			return GetRuleContext<NativeCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectCreationContext objectCreation() {
			return GetRuleContext<ObjectCreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment() {
			return GetRuleContext<FieldAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public AdorableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adorableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterAdorableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitAdorableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdorableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdorableStatementContext adorableStatement() {
		AdorableStatementContext _localctx = new AdorableStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_adorableStatement);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				squeakOut();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				hugThis();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 74;
				snugLoop();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				fluffMagic();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 76;
				snuggleIf();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 77;
				purrMath();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 78;
				snipChoose();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 79;
				bringWarmth();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 80;
				invokeWhimsy();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 81;
				squeakNetGet();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 82;
				squeakIn();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 83;
				squeakMathCall();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 84;
				nativeCall();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 85;
				objectCreation();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 86;
				fieldAssignment();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 87;
				returnStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtraStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqueakNetGetContext squeakNetGet() {
			return GetRuleContext<SqueakNetGetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqueakInContext squeakIn() {
			return GetRuleContext<SqueakInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqueakMathCallContext squeakMathCall() {
			return GetRuleContext<SqueakMathCallContext>(0);
		}
		public ExtraStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extraStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterExtraStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitExtraStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtraStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtraStatementContext extraStatement() {
		ExtraStatementContext _localctx = new ExtraStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_extraStatement);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				squeakNetGet();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91;
				squeakIn();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				squeakMathCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(SqueakSpeakParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(SqueakSpeakParser.STRING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		public NativeCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterNativeCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitNativeCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeCallContext nativeCall() {
		NativeCallContext _localctx = new NativeCallContext(Context, State);
		EnterRule(_localctx, 6, RULE_nativeCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(T__0);
			State = 96;
			Match(STRING);
			State = 97;
			Match(STRING);
			State = 98;
			Match(T__1);
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33002545479684L) != 0)) {
				{
				State = 99;
				paramList();
				}
			}

			State = 102;
			Match(T__2);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 103;
				Match(T__3);
				State = 104;
				Match(ID);
				}
			}

			State = 107;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqueakNetGetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		public SqueakNetGetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squeakNetGet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSqueakNetGet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSqueakNetGet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqueakNetGet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqueakNetGetContext squeakNetGet() {
		SqueakNetGetContext _localctx = new SqueakNetGetContext(Context, State);
		EnterRule(_localctx, 8, RULE_squeakNetGet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__5);
			State = 110;
			Match(T__1);
			State = 111;
			purrOperation();
			State = 112;
			Match(T__2);
			State = 113;
			Match(T__3);
			State = 114;
			Match(ID);
			State = 115;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqueakInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		public SqueakInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squeakIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSqueakIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSqueakIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqueakIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqueakInContext squeakIn() {
		SqueakInContext _localctx = new SqueakInContext(Context, State);
		EnterRule(_localctx, 10, RULE_squeakIn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(T__6);
			State = 118;
			Match(T__1);
			State = 119;
			Match(ID);
			State = 120;
			Match(T__2);
			State = 121;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqueakMathCallContext : ParserRuleContext {
		public IToken mathFunc;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqueakSpeakParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqueakSpeakParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext[] purrOperation() {
			return GetRuleContexts<PurrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation(int i) {
			return GetRuleContext<PurrOperationContext>(i);
		}
		public SqueakMathCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squeakMathCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSqueakMathCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSqueakMathCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqueakMathCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqueakMathCallContext squeakMathCall() {
		SqueakMathCallContext _localctx = new SqueakMathCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_squeakMathCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(T__7);
			State = 124;
			Match(T__1);
			State = 125;
			_localctx.mathFunc = Match(ID);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 126;
				Match(T__8);
				State = 127;
				purrOperation();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 128;
					Match(T__8);
					State = 129;
					purrOperation();
					}
				}

				}
			}

			State = 134;
			Match(T__2);
			State = 135;
			Match(T__3);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 136;
				Match(ID);
				}
			}

			State = 139;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqueakOutContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		public SqueakOutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_squeakOut; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSqueakOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSqueakOut(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqueakOut(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqueakOutContext squeakOut() {
		SqueakOutContext _localctx = new SqueakOutContext(Context, State);
		EnterRule(_localctx, 14, RULE_squeakOut);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(T__9);
			State = 142;
			purrOperation();
			State = 143;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HugThisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeWhimsyContext invokeWhimsy() {
			return GetRuleContext<InvokeWhimsyContext>(0);
		}
		public HugThisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hugThis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterHugThis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitHugThis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHugThis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HugThisContext hugThis() {
		HugThisContext _localctx = new HugThisContext(Context, State);
		EnterRule(_localctx, 16, RULE_hugThis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__10);
			State = 146;
			Match(ID);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 147;
				Match(T__11);
				State = 150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 148;
					purrOperation();
					}
					break;
				case 2:
					{
					State = 149;
					invokeWhimsy();
					}
					break;
				}
				}
			}

			State = 154;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SnugLoopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext[] adorableStatement() {
			return GetRuleContexts<AdorableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext adorableStatement(int i) {
			return GetRuleContext<AdorableStatementContext>(i);
		}
		public SnugLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snugLoop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSnugLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSnugLoop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnugLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SnugLoopContext snugLoop() {
		SnugLoopContext _localctx = new SnugLoopContext(Context, State);
		EnterRule(_localctx, 18, RULE_snugLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			Match(T__12);
			State = 157;
			Match(T__1);
			State = 158;
			condition();
			State = 159;
			Match(T__2);
			State = 160;
			Match(T__13);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
				{
				{
				State = 161;
				adorableStatement();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 167;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FluffMagicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext[] adorableStatement() {
			return GetRuleContexts<AdorableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext adorableStatement(int i) {
			return GetRuleContext<AdorableStatementContext>(i);
		}
		public FluffMagicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fluffMagic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterFluffMagic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitFluffMagic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFluffMagic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FluffMagicContext fluffMagic() {
		FluffMagicContext _localctx = new FluffMagicContext(Context, State);
		EnterRule(_localctx, 20, RULE_fluffMagic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			Match(T__15);
			State = 170;
			Match(ID);
			State = 171;
			Match(T__1);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33002545479684L) != 0)) {
				{
				State = 172;
				paramList();
				}
			}

			State = 175;
			Match(T__2);
			State = 176;
			Match(T__13);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
				{
				{
				State = 177;
				adorableStatement();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 183;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SnuggleIfContext : ParserRuleContext {
		public AdorableStatementContext _adorableStatement;
		public IList<AdorableStatementContext> _ifBlock = new List<AdorableStatementContext>();
		public IList<AdorableStatementContext> _elseBlock = new List<AdorableStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext[] adorableStatement() {
			return GetRuleContexts<AdorableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext adorableStatement(int i) {
			return GetRuleContext<AdorableStatementContext>(i);
		}
		public SnuggleIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snuggleIf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSnuggleIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSnuggleIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnuggleIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SnuggleIfContext snuggleIf() {
		SnuggleIfContext _localctx = new SnuggleIfContext(Context, State);
		EnterRule(_localctx, 22, RULE_snuggleIf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__16);
			State = 186;
			Match(T__1);
			State = 187;
			condition();
			State = 188;
			Match(T__2);
			State = 189;
			Match(T__13);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
				{
				{
				State = 190;
				_localctx._adorableStatement = adorableStatement();
				_localctx._ifBlock.Add(_localctx._adorableStatement);
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			Match(T__14);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 197;
				Match(T__17);
				State = 198;
				Match(T__13);
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
					{
					{
					State = 199;
					_localctx._adorableStatement = adorableStatement();
					_localctx._elseBlock.Add(_localctx._adorableStatement);
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 205;
				Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SnipChooseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SnipCaseContext[] snipCase() {
			return GetRuleContexts<SnipCaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SnipCaseContext snipCase(int i) {
			return GetRuleContext<SnipCaseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SnipDefaultContext snipDefault() {
			return GetRuleContext<SnipDefaultContext>(0);
		}
		public SnipChooseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snipChoose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSnipChoose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSnipChoose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnipChoose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SnipChooseContext snipChoose() {
		SnipChooseContext _localctx = new SnipChooseContext(Context, State);
		EnterRule(_localctx, 24, RULE_snipChoose);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(T__18);
			State = 209;
			Match(T__1);
			State = 210;
			Match(ID);
			State = 211;
			Match(T__2);
			State = 212;
			Match(T__13);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__19) {
				{
				{
				State = 213;
				snipCase();
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 219;
				snipDefault();
				}
			}

			State = 222;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SnipCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SqueakSpeakParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqueakSpeakParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext[] adorableStatement() {
			return GetRuleContexts<AdorableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext adorableStatement(int i) {
			return GetRuleContext<AdorableStatementContext>(i);
		}
		public SnipCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snipCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSnipCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSnipCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnipCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SnipCaseContext snipCase() {
		SnipCaseContext _localctx = new SnipCaseContext(Context, State);
		EnterRule(_localctx, 26, RULE_snipCase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(T__19);
			State = 225;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 24189255811072L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 226;
			Match(T__20);
			State = 227;
			Match(T__13);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
				{
				{
				State = 228;
				adorableStatement();
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 234;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SnipDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext[] adorableStatement() {
			return GetRuleContexts<AdorableStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdorableStatementContext adorableStatement(int i) {
			return GetRuleContext<AdorableStatementContext>(i);
		}
		public SnipDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_snipDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterSnipDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitSnipDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSnipDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SnipDefaultContext snipDefault() {
		SnipDefaultContext _localctx = new SnipDefaultContext(Context, State);
		EnterRule(_localctx, 28, RULE_snipDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(T__21);
			State = 237;
			Match(T__20);
			State = 238;
			Match(T__13);
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398256958914L) != 0)) {
				{
				{
				State = 239;
				adorableStatement();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 245;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BringWarmthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqueakSpeakParser.STRING, 0); }
		public BringWarmthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bringWarmth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterBringWarmth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitBringWarmth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBringWarmth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BringWarmthContext bringWarmth() {
		BringWarmthContext _localctx = new BringWarmthContext(Context, State);
		EnterRule(_localctx, 30, RULE_bringWarmth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(T__22);
			State = 248;
			Match(STRING);
			State = 249;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvokeWhimsyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public InvokeWhimsyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invokeWhimsy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterInvokeWhimsy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitInvokeWhimsy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvokeWhimsy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InvokeWhimsyContext invokeWhimsy() {
		InvokeWhimsyContext _localctx = new InvokeWhimsyContext(Context, State);
		EnterRule(_localctx, 32, RULE_invokeWhimsy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			Match(ID);
			State = 252;
			Match(T__1);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33002545479684L) != 0)) {
				{
				State = 253;
				paramList();
				}
			}

			State = 256;
			Match(T__2);
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 257;
				Match(T__4);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurrMathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LeftExprContext leftExpr() {
			return GetRuleContext<LeftExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeWhimsyContext invokeWhimsy() {
			return GetRuleContext<InvokeWhimsyContext>(0);
		}
		public PurrMathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purrMath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterPurrMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitPurrMath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurrMath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurrMathContext purrMath() {
		PurrMathContext _localctx = new PurrMathContext(Context, State);
		EnterRule(_localctx, 34, RULE_purrMath);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			leftExpr();
			State = 261;
			Match(T__11);
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 262;
				purrOperation();
				}
				break;
			case 2:
				{
				State = 263;
				invokeWhimsy();
				}
				break;
			}
			State = 266;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeftExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqueakSpeakParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqueakSpeakParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext[] purrOperation() {
			return GetRuleContexts<PurrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation(int i) {
			return GetRuleContext<PurrOperationContext>(i);
		}
		public LeftExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leftExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterLeftExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitLeftExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeftExprContext leftExpr() {
		LeftExprContext _localctx = new LeftExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_leftExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(ID);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 269;
				Match(T__3);
				State = 270;
				Match(ID);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23) {
				{
				{
				State = 276;
				Match(T__23);
				State = 277;
				purrOperation();
				State = 278;
				Match(T__24);
				}
				}
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext[] fieldAssignment() {
			return GetRuleContexts<FieldAssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAssignmentContext fieldAssignment(int i) {
			return GetRuleContext<FieldAssignmentContext>(i);
		}
		public ObjectCreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitObjectCreation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationContext objectCreation() {
		ObjectCreationContext _localctx = new ObjectCreationContext(Context, State);
		EnterRule(_localctx, 38, RULE_objectCreation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T__25);
			State = 286;
			Match(ID);
			State = 287;
			Match(T__13);
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ID) {
				{
				{
				State = 288;
				fieldAssignment();
				}
				}
				State = 293;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 294;
			Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqueakSpeakParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqueakSpeakParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		public FieldAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitFieldAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAssignmentContext fieldAssignment() {
		FieldAssignmentContext _localctx = new FieldAssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_fieldAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(ID);
			State = 297;
			Match(T__3);
			State = 298;
			Match(ID);
			State = 299;
			Match(T__11);
			State = 300;
			purrOperation();
			State = 301;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			Match(T__26);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33002545479684L) != 0)) {
				{
				State = 304;
				purrOperation();
				}
			}

			State = 307;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurrOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext[] fieldAccess() {
			return GetRuleContexts<FieldAccessContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldAccessContext fieldAccess(int i) {
			return GetRuleContext<FieldAccessContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperatorContext[] purrOperator() {
			return GetRuleContexts<PurrOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperatorContext purrOperator(int i) {
			return GetRuleContext<PurrOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InvokeWhimsyContext invokeWhimsy() {
			return GetRuleContext<InvokeWhimsyContext>(0);
		}
		public PurrOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purrOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterPurrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitPurrOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurrOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurrOperationContext purrOperation() {
		PurrOperationContext _localctx = new PurrOperationContext(Context, State);
		EnterRule(_localctx, 44, RULE_purrOperation);
		int _la;
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				fieldAccess();
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) {
					{
					{
					State = 310;
					purrOperator();
					State = 311;
					fieldAccess();
					}
					}
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				invokeWhimsy();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurrOperatorContext : ParserRuleContext {
		public PurrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterPurrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitPurrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurrOperatorContext purrOperator() {
		PurrOperatorContext _localctx = new PurrOperatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_purrOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldAccessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PurrTermContext purrTerm() {
			return GetRuleContext<PurrTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqueakSpeakParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqueakSpeakParser.ID, i);
		}
		public FieldAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldAccess; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitFieldAccess(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldAccessContext fieldAccess() {
		FieldAccessContext _localctx = new FieldAccessContext(Context, State);
		EnterRule(_localctx, 48, RULE_fieldAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			purrTerm();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 324;
				Match(T__3);
				State = 325;
				Match(ID);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurrTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BaseTermContext baseTerm() {
			return GetRuleContext<BaseTermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext[] purrOperation() {
			return GetRuleContexts<PurrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation(int i) {
			return GetRuleContext<PurrOperationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NativeCallExprContext nativeCallExpr() {
			return GetRuleContext<NativeCallExprContext>(0);
		}
		public PurrTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purrTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterPurrTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitPurrTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurrTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurrTermContext purrTerm() {
		PurrTermContext _localctx = new PurrTermContext(Context, State);
		EnterRule(_localctx, 50, RULE_purrTerm);
		int _la;
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__23:
			case STRING:
			case ID:
			case FLOAT:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 331;
				baseTerm();
				State = 338;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__23) {
					{
					{
					State = 332;
					Match(T__23);
					State = 333;
					purrOperation();
					State = 334;
					Match(T__24);
					}
					}
					State = 340;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 2);
				{
				State = 341;
				nativeCallExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeCallExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public NativeCallExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeCallExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterNativeCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitNativeCallExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeCallExprContext nativeCallExpr() {
		NativeCallExprContext _localctx = new NativeCallExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_nativeCallExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(T__33);
			State = 345;
			Match(ID);
			State = 346;
			Match(T__1);
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33002545479684L) != 0)) {
				{
				State = 347;
				paramList();
				}
			}

			State = 350;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SqueakSpeakParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SqueakSpeakParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SqueakSpeakParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public BaseTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterBaseTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitBaseTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTermContext baseTerm() {
		BaseTermContext _localctx = new BaseTermContext(Context, State);
		EnterRule(_localctx, 54, RULE_baseTerm);
		try {
			State = 361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				Match(ID);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				Match(NUMBER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355;
				Match(STRING);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356;
				Match(T__1);
				State = 357;
				purrOperation();
				State = 358;
				Match(T__2);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 6);
				{
				State = 360;
				arrayLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext[] purrOperation() {
			return GetRuleContexts<PurrOperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation(int i) {
			return GetRuleContext<PurrOperationContext>(i);
		}
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__23);
			State = 364;
			purrOperation();
			State = 369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 365;
				Match(T__8);
				State = 366;
				purrOperation();
				}
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 372;
			Match(T__24);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(SqueakSpeakParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(SqueakSpeakParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(SqueakSpeakParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(SqueakSpeakParser.FLOAT, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 58, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(ID);
			State = 375;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2164663517184L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 376;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577728L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 60, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			param();
			State = 383;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				{
				State = 379;
				Match(T__8);
				State = 380;
				param();
				}
				}
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(SqueakSpeakParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurrOperationContext purrOperation() {
			return GetRuleContext<PurrOperationContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISqueakSpeakListener typedListener = listener as ISqueakSpeakListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISqueakSpeakVisitor<TResult> typedVisitor = visitor as ISqueakSpeakVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 62, RULE_param);
		try {
			State = 388;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				purrOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,47,391,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,1,0,5,0,66,8,0,10,0,12,0,69,9,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,89,
		8,1,1,2,1,2,1,2,3,2,94,8,2,1,3,1,3,1,3,1,3,1,3,3,3,101,8,3,1,3,1,3,1,3,
		3,3,106,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
		5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,131,8,6,3,6,133,8,6,1,6,1,6,1,6,
		3,6,138,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,151,8,8,3,
		8,153,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,163,8,9,10,9,12,9,166,9,
		9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,174,8,10,1,10,1,10,1,10,5,10,179,8,
		10,10,10,12,10,182,9,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,192,
		8,11,10,11,12,11,195,9,11,1,11,1,11,1,11,1,11,5,11,201,8,11,10,11,12,11,
		204,9,11,1,11,3,11,207,8,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,215,8,12,
		10,12,12,12,218,9,12,1,12,3,12,221,8,12,1,12,1,12,1,13,1,13,1,13,1,13,
		1,13,5,13,230,8,13,10,13,12,13,233,9,13,1,13,1,13,1,14,1,14,1,14,1,14,
		5,14,241,8,14,10,14,12,14,244,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
		1,16,1,16,3,16,255,8,16,1,16,1,16,3,16,259,8,16,1,17,1,17,1,17,1,17,3,
		17,265,8,17,1,17,1,17,1,18,1,18,1,18,5,18,272,8,18,10,18,12,18,275,9,18,
		1,18,1,18,1,18,1,18,5,18,281,8,18,10,18,12,18,284,9,18,1,19,1,19,1,19,
		1,19,5,19,290,8,19,10,19,12,19,293,9,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,21,1,21,3,21,306,8,21,1,21,1,21,1,22,1,22,1,22,1,22,5,
		22,314,8,22,10,22,12,22,317,9,22,1,22,3,22,320,8,22,1,23,1,23,1,24,1,24,
		1,24,5,24,327,8,24,10,24,12,24,330,9,24,1,25,1,25,1,25,1,25,1,25,5,25,
		337,8,25,10,25,12,25,340,9,25,1,25,3,25,343,8,25,1,26,1,26,1,26,1,26,3,
		26,349,8,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
		362,8,27,1,28,1,28,1,28,1,28,5,28,368,8,28,10,28,12,28,371,9,28,1,28,1,
		28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,5,30,382,8,30,10,30,12,30,385,9,
		30,1,31,1,31,3,31,389,8,31,1,31,0,0,32,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,0,4,2,0,41,
		42,44,44,1,0,28,33,1,0,35,40,1,0,42,44,414,0,67,1,0,0,0,2,88,1,0,0,0,4,
		93,1,0,0,0,6,95,1,0,0,0,8,109,1,0,0,0,10,117,1,0,0,0,12,123,1,0,0,0,14,
		141,1,0,0,0,16,145,1,0,0,0,18,156,1,0,0,0,20,169,1,0,0,0,22,185,1,0,0,
		0,24,208,1,0,0,0,26,224,1,0,0,0,28,236,1,0,0,0,30,247,1,0,0,0,32,251,1,
		0,0,0,34,260,1,0,0,0,36,268,1,0,0,0,38,285,1,0,0,0,40,296,1,0,0,0,42,303,
		1,0,0,0,44,319,1,0,0,0,46,321,1,0,0,0,48,323,1,0,0,0,50,342,1,0,0,0,52,
		344,1,0,0,0,54,361,1,0,0,0,56,363,1,0,0,0,58,374,1,0,0,0,60,378,1,0,0,
		0,62,388,1,0,0,0,64,66,3,2,1,0,65,64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,
		0,67,68,1,0,0,0,68,70,1,0,0,0,69,67,1,0,0,0,70,71,5,0,0,1,71,1,1,0,0,0,
		72,89,3,14,7,0,73,89,3,16,8,0,74,89,3,18,9,0,75,89,3,20,10,0,76,89,3,22,
		11,0,77,89,3,34,17,0,78,89,3,24,12,0,79,89,3,30,15,0,80,89,3,32,16,0,81,
		89,3,8,4,0,82,89,3,10,5,0,83,89,3,12,6,0,84,89,3,6,3,0,85,89,3,38,19,0,
		86,89,3,40,20,0,87,89,3,42,21,0,88,72,1,0,0,0,88,73,1,0,0,0,88,74,1,0,
		0,0,88,75,1,0,0,0,88,76,1,0,0,0,88,77,1,0,0,0,88,78,1,0,0,0,88,79,1,0,
		0,0,88,80,1,0,0,0,88,81,1,0,0,0,88,82,1,0,0,0,88,83,1,0,0,0,88,84,1,0,
		0,0,88,85,1,0,0,0,88,86,1,0,0,0,88,87,1,0,0,0,89,3,1,0,0,0,90,94,3,8,4,
		0,91,94,3,10,5,0,92,94,3,12,6,0,93,90,1,0,0,0,93,91,1,0,0,0,93,92,1,0,
		0,0,94,5,1,0,0,0,95,96,5,1,0,0,96,97,5,41,0,0,97,98,5,41,0,0,98,100,5,
		2,0,0,99,101,3,60,30,0,100,99,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,0,
		102,105,5,3,0,0,103,104,5,4,0,0,104,106,5,42,0,0,105,103,1,0,0,0,105,106,
		1,0,0,0,106,107,1,0,0,0,107,108,5,5,0,0,108,7,1,0,0,0,109,110,5,6,0,0,
		110,111,5,2,0,0,111,112,3,44,22,0,112,113,5,3,0,0,113,114,5,4,0,0,114,
		115,5,42,0,0,115,116,5,5,0,0,116,9,1,0,0,0,117,118,5,7,0,0,118,119,5,2,
		0,0,119,120,5,42,0,0,120,121,5,3,0,0,121,122,5,5,0,0,122,11,1,0,0,0,123,
		124,5,8,0,0,124,125,5,2,0,0,125,132,5,42,0,0,126,127,5,9,0,0,127,130,3,
		44,22,0,128,129,5,9,0,0,129,131,3,44,22,0,130,128,1,0,0,0,130,131,1,0,
		0,0,131,133,1,0,0,0,132,126,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,
		135,5,3,0,0,135,137,5,4,0,0,136,138,5,42,0,0,137,136,1,0,0,0,137,138,1,
		0,0,0,138,139,1,0,0,0,139,140,5,5,0,0,140,13,1,0,0,0,141,142,5,10,0,0,
		142,143,3,44,22,0,143,144,5,5,0,0,144,15,1,0,0,0,145,146,5,11,0,0,146,
		152,5,42,0,0,147,150,5,12,0,0,148,151,3,44,22,0,149,151,3,32,16,0,150,
		148,1,0,0,0,150,149,1,0,0,0,151,153,1,0,0,0,152,147,1,0,0,0,152,153,1,
		0,0,0,153,154,1,0,0,0,154,155,5,5,0,0,155,17,1,0,0,0,156,157,5,13,0,0,
		157,158,5,2,0,0,158,159,3,58,29,0,159,160,5,3,0,0,160,164,5,14,0,0,161,
		163,3,2,1,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,
		0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,168,5,15,0,0,168,19,1,0,0,0,
		169,170,5,16,0,0,170,171,5,42,0,0,171,173,5,2,0,0,172,174,3,60,30,0,173,
		172,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,175,176,5,3,0,0,176,180,5,
		14,0,0,177,179,3,2,1,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,
		180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,15,0,0,184,21,
		1,0,0,0,185,186,5,17,0,0,186,187,5,2,0,0,187,188,3,58,29,0,188,189,5,3,
		0,0,189,193,5,14,0,0,190,192,3,2,1,0,191,190,1,0,0,0,192,195,1,0,0,0,193,
		191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,206,5,
		15,0,0,197,198,5,18,0,0,198,202,5,14,0,0,199,201,3,2,1,0,200,199,1,0,0,
		0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,
		202,1,0,0,0,205,207,5,15,0,0,206,197,1,0,0,0,206,207,1,0,0,0,207,23,1,
		0,0,0,208,209,5,19,0,0,209,210,5,2,0,0,210,211,5,42,0,0,211,212,5,3,0,
		0,212,216,5,14,0,0,213,215,3,26,13,0,214,213,1,0,0,0,215,218,1,0,0,0,216,
		214,1,0,0,0,216,217,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,219,221,3,
		28,14,0,220,219,1,0,0,0,220,221,1,0,0,0,221,222,1,0,0,0,222,223,5,15,0,
		0,223,25,1,0,0,0,224,225,5,20,0,0,225,226,7,0,0,0,226,227,5,21,0,0,227,
		231,5,14,0,0,228,230,3,2,1,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,
		0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,15,0,0,
		235,27,1,0,0,0,236,237,5,22,0,0,237,238,5,21,0,0,238,242,5,14,0,0,239,
		241,3,2,1,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,
		0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,245,246,5,15,0,0,246,29,1,0,0,0,
		247,248,5,23,0,0,248,249,5,41,0,0,249,250,5,5,0,0,250,31,1,0,0,0,251,252,
		5,42,0,0,252,254,5,2,0,0,253,255,3,60,30,0,254,253,1,0,0,0,254,255,1,0,
		0,0,255,256,1,0,0,0,256,258,5,3,0,0,257,259,5,5,0,0,258,257,1,0,0,0,258,
		259,1,0,0,0,259,33,1,0,0,0,260,261,3,36,18,0,261,264,5,12,0,0,262,265,
		3,44,22,0,263,265,3,32,16,0,264,262,1,0,0,0,264,263,1,0,0,0,265,266,1,
		0,0,0,266,267,5,5,0,0,267,35,1,0,0,0,268,273,5,42,0,0,269,270,5,4,0,0,
		270,272,5,42,0,0,271,269,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
		1,0,0,0,274,282,1,0,0,0,275,273,1,0,0,0,276,277,5,24,0,0,277,278,3,44,
		22,0,278,279,5,25,0,0,279,281,1,0,0,0,280,276,1,0,0,0,281,284,1,0,0,0,
		282,280,1,0,0,0,282,283,1,0,0,0,283,37,1,0,0,0,284,282,1,0,0,0,285,286,
		5,26,0,0,286,287,5,42,0,0,287,291,5,14,0,0,288,290,3,40,20,0,289,288,1,
		0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,
		293,291,1,0,0,0,294,295,5,15,0,0,295,39,1,0,0,0,296,297,5,42,0,0,297,298,
		5,4,0,0,298,299,5,42,0,0,299,300,5,12,0,0,300,301,3,44,22,0,301,302,5,
		5,0,0,302,41,1,0,0,0,303,305,5,27,0,0,304,306,3,44,22,0,305,304,1,0,0,
		0,305,306,1,0,0,0,306,307,1,0,0,0,307,308,5,5,0,0,308,43,1,0,0,0,309,315,
		3,48,24,0,310,311,3,46,23,0,311,312,3,48,24,0,312,314,1,0,0,0,313,310,
		1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,320,1,0,0,
		0,317,315,1,0,0,0,318,320,3,32,16,0,319,309,1,0,0,0,319,318,1,0,0,0,320,
		45,1,0,0,0,321,322,7,1,0,0,322,47,1,0,0,0,323,328,3,50,25,0,324,325,5,
		4,0,0,325,327,5,42,0,0,326,324,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,
		328,329,1,0,0,0,329,49,1,0,0,0,330,328,1,0,0,0,331,338,3,54,27,0,332,333,
		5,24,0,0,333,334,3,44,22,0,334,335,5,25,0,0,335,337,1,0,0,0,336,332,1,
		0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,343,1,0,0,0,
		340,338,1,0,0,0,341,343,3,52,26,0,342,331,1,0,0,0,342,341,1,0,0,0,343,
		51,1,0,0,0,344,345,5,34,0,0,345,346,5,42,0,0,346,348,5,2,0,0,347,349,3,
		60,30,0,348,347,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,350,351,5,3,0,
		0,351,53,1,0,0,0,352,362,5,42,0,0,353,362,5,44,0,0,354,362,5,43,0,0,355,
		362,5,41,0,0,356,357,5,2,0,0,357,358,3,44,22,0,358,359,5,3,0,0,359,362,
		1,0,0,0,360,362,3,56,28,0,361,352,1,0,0,0,361,353,1,0,0,0,361,354,1,0,
		0,0,361,355,1,0,0,0,361,356,1,0,0,0,361,360,1,0,0,0,362,55,1,0,0,0,363,
		364,5,24,0,0,364,369,3,44,22,0,365,366,5,9,0,0,366,368,3,44,22,0,367,365,
		1,0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,
		0,371,369,1,0,0,0,372,373,5,25,0,0,373,57,1,0,0,0,374,375,5,42,0,0,375,
		376,7,2,0,0,376,377,7,3,0,0,377,59,1,0,0,0,378,383,3,62,31,0,379,380,5,
		9,0,0,380,382,3,62,31,0,381,379,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,
		0,383,384,1,0,0,0,384,61,1,0,0,0,385,383,1,0,0,0,386,389,5,42,0,0,387,
		389,3,44,22,0,388,386,1,0,0,0,388,387,1,0,0,0,389,63,1,0,0,0,37,67,88,
		93,100,105,130,132,137,150,152,164,173,180,193,202,206,216,220,231,242,
		254,258,264,273,282,291,305,315,319,328,338,342,348,361,369,383,388
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
